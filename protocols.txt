client to server:

{
  type:        ADD_PARTICIPANT,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:      String,
  participantId:  String
}

{
  type:        BLACKLIST_USER,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:      String,
  participantId:  String
}

{
  type:        BLACKLIST_USER,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:      String,
  participantId:  String
}

{
  type:        BLACKLIST_USER,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:      String,
  participantId:  String
}

{
  type:        BLOCK_USER,
  priority:    int,

  userId:      String,
  token:       Token,

  blockUsername:  String
  (by name so that can blocking strangers can be implemented in the future)
}

{
  type:        CANCEL_FRIEND_REQUEST,
  priority:    int,

  userId:      String,
  token:       Token,

  recipientId:  String
}

{
  type:        CHANGE_CHANNEL,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:  String,
  fieldToChange: ChannelField,
  newValue:   String

  -----------------------------
  ChannelField types: NAME
}

{
  type:        CHANGE_PASSWORD,
  priority:    int,

  userId:      String,
  token:       Token,

  originalPassword:  String
  newPassword:       String
}

{
  type:        CHANGE_PROFILE,
  priority:    int,

  userId:      String,
  token:       Token,

  fieldToChange:  ProfileField
  newValue:       String

  -----------------------------
  ProfileField types: USERNAME, DESCRIPTION
}

{
  type:        CREATE_CHANNEL,
  priority:    int,

  userId:      String,
  token:       Token,

  participants:  LinkedHashSet<UserMetadata>
  name:          String
}

{
  type:        EDIT_MESSAGE,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:   String,
  messageId:   String,
  newContent:  String
}

{
  type:        FRIEND_REQUEST,
  priority:    int,

  userId:      String,
  token:       Token,

  recipientName:   String,
  requestMessage:  String
}

{
  type:        FRIEND_REQUEST_RESPONSE,
  priority:    int,

  userId:      String,
  token:       Token,

  requesterId: String,
  accepted:    boolean
}

{
  type:        KEEP_ALIVE,
  priority:    3 (should have higher priority than other payloads)
}

{
  type:        LEAVE_CHANNEL,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:   String
}

{
  type:        LOGIN,
  priority:    int,

  username:    String,
  password:    String
}

{
  type:        MESSAGE_TO_SERVER,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:      String,
  content:        String,
  attachment:     byte[], or null if no attachment
  attachmentName: String, or null if no attachment
}

{
  type:        NEW_USER,
  priority:    int,

  userId:      String,
  token:       Token,

  username:      String,
  password:      String,
  description:   String
}

{
  type:        REMOVE_FRIEND,
  priority:    int,

  userId:      String,
  token:       Token,

  friendId:    String
}

{
  type:        REMOVE_MESSAGE,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:   String,
  messageId:   String
}

{
  type:        REMOVE_PARTICIPANT,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:       String,
  participantId:   String
}

{
  type:          REQUEST_ATTACHMENT,
  priority:      int,

  userId:        String,
  token:         Token,

  attachmentId:  String
}

{
  type:          REQUEST_MESSAGES,
  priority:      int,

  userId:        String,
  token:         Token,

  channelId:     String,
  created:       Timestamp,
  quantity:      int
  (requests for an amount of messages before the timestamp)
}

{
  type:        TRANSFER_OWNERSHIP,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:   String,
  recipientId: String
}

{
  type:        UPDATE_STATUS,
  priority:    int,

  userId:      String,
  token:       Token,

  status:      UserStatus
}

----------------------------------------------

server to client:

{
  type:     CLIENT_REQUEST_STATUS,
  priority: priority,

  errorMessage:  null / String
  (if null, the request was successful)
}

{
  type:     CLIENT_INFO,
  priority: priority,

  clientData: ClientData
  (used to initialize the user's data when the client logs in)
}

{
  type:      ATTACHMENT_TO_CLIENT,
  priority:  priority,

  attachment:  Attachment
}

{
  type:        CLIENT_CHANNELS_UPDATE,
  priority:    int,

  channels:    LinkedHashSet<channelMetadata>
}

{
  type:        CLIENT_FRIENDS_UPDATE,
  priority:    int,

  friends:     LinkedHashSet<userMetadata>,
  incomingFriendRequests: ConcurrentHashMap<UserMetadata, String>,
  outgoingFriendRequests: ConcurrentHashMap<UserMetadata, String>,
  (The Strings are request messages)
}

{
  type: MESSAGES_TO_CLIENT,
  priority: priority,

  channelId: channelId,
  messages:  Message[]
}

{
  type: MESSAGE_UPDATE_TO_CLIENT,
  priority:   int,

  channelId:  String,
  message:    Message,

  updateType: MessageUpdateType
  -----------------------------
  MessageUpdateType types: NEW, EDIT, REMOVE
}