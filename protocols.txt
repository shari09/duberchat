client to server:

{
  type:        NEW_USER,
  priority:    int,

  username:    String,
  password:    String,
  description: String
}

{
  type:        LOGIN,
  priority:    int,

  username:    String,
  password:    String
}

{
  type:        CHANGE_PASSWORD,
  priority:    int,

  userId:      String,
  token:       Token,

  originalPassword: String,
  newPassword:      String
}

{
  type:          CHANGE_PROFILE,
  priority:      int,

  userId:        String,
  token:         Token,

  fieldToChange: ProfileField
  newValue:      String
}

{
  type:        CHANGE_CHANNEL,
  priority:    int,

  userId:      String,
  token:       Token,

  channelId:   String,
  changeField: ChannelField
  newValue:    String
}

{
  type:        CREATE_CHANNEL,
  priority:    int,

  userId:      String,
  token:       Token,

  users:       String[] 
}

{
  type:              ADD_PARTICIPANTS_TO_CHANNEL,
  priority:          int,

  userId:            String,
  token:             Token,

  channelId:         String,
  participantsId:    String[] //user id
}

{
  type:              REMOVE_PARTICIPANT,
  priority:          int,

  userId:            String,
  token:             Token,

  channelId:         String,
  participantId:     String //user id
}

{
  type:              BLOCK_PARTICIPANT,
  priority:          int,

  userId:            String,
  token:             Token,

  channelId:         String,
  participantId:     String //user id
}

{
  type:              LEAVE_CHANNEL,
  priority:          int,

  userId:            String,
  token:             Token,

  channelId:         String,
}

{
  type:              TRANSFER_OWNERSHIP,
  priority:          int,

  userId:            String,
  token:             Token,

  channelId:         String,
  recipientId:       String //user id
}



{
  type:       SEND_MESSAGE,
  priority:   int,

  userId:     String,
  token:      Token,

  channelId:  String,
  content:    String,
  attachment: null / byte[]
}

{
  type:       REMOVE_MESSAGE,
  priority:   int,

  userId:     String,
  token:      Token,

  channelId:  String,
  messageId:  String,
}

{
  type:       EDIT_MESSAGE,
  priority:   int,

  userId:     String,
  token:      Token,

  channelId:  String,
  messageId:  String,
  newContent: String,
}

{
  type:       REQUEST_MESSAGES,
  priority:   int,

  userId:     String,
  token:      Token,

  channelId:  String,
  before:     Timestamp, //earliest timestamp in cache
  quantity:   int
}

{
  type:       FRIEND_REQUEST,
  priority:   int,

  userId:     String,
  token:      Token,

  recipientName:  String,
  requestMessage: String 
}

{
  type:           BLOCK_USER,
  priority:       int,

  userId:         String,
  token:          Token,

  blockUsername:  String,
}

{
  type:       FRIEND_REQUEST_RESPONSE,
  priority:   int,

  userId:     String,
  token:      Token,

  recipientId:  String,
  accepted:     boolean
}

{
  type: REQUEST_ATTACHMENT,
  priority: priority,

  userId: String,
  token: Token,

  fileId: String
}


server to client:

{
  type:     CLIENT_REQUEST_STATUS,
  priority: priority,

  error:  null / String (errorMsg)
}

{
  type:     CLIENT_INFO,
  priority: priority,

  userId:   String,
  token:    Token,
  friends:  ArrayList<userMetadata> (userId),
  incoming_friend_requests: ArrayList<userMetadata> (userId),
  outgoing_friend_requests: ArrayList<userMetadata> (userId),
  channels: ArrayList<channelMetadata> (channelId)
}

{
  type: MESSAGES,
  priority: priority,

  channelId: channelId,
  content: Message[]
}

{
  type:      ATTACHMENT,
  priority:  priority,

  filename:  String,
  content:   byte[]
}

Data:
user = {
  userId:      String,
  username:    String,
  password:    String,
  description: String,
  status:   UserStatus (active/idle/invisible/dnd),

  friends:  ArrayList<userMetadata>, //user id
  incoming_friend_requests: ArrayList<userMetadata>, //user id
  outgoing_friend_requests: ConcurrentHashMap<userMetadata, FriendRequestStatus>,
  blocked:  ArrayList<userMetadata>, //user id
  
  channels: ArrayList<channelMetadata>, //channel id
}

privateChannel = {
  channelId: channelId,
  channelName: channelName,
  participants: [userId]
}

groupChannel = {
  channelId: channelId,
  channelName: channelName,
  participants: [userId],
  blacklist: [userId],
  admin: userId
}

message = {
  content:    String,
  sender:     String (userId),
  created:    Timestamp,
  edited:     Timestamp,
  attachment: null / fileId,
}